module <%= @type.type_name %>

  Type = ResourceObject::Type.define do

    model <%= @type.model.name %>
    name '<%= @type.base_name %>'
    description ''

    # custom fields

    # scalars

<% @type.scalar_fields.each do |f| -%>
    field :<%= f.name %>, <% if f.required? %>!<% end %>types.<%= f.type %>, ''<% if f.renamed? %>, property: :<%= f.property %><% end %>
<% end -%>

    # belongs_to

<% @type.belongs_to_fields.each do |f| -%>
    field :<%= f.name %>, <%= f.type %>::Type, ''<% if f.renamed? %>, property: :<%= f.property %><% end %>
<% end -%>

    # has_one

<% @type.has_one_fields.each do |f| -%>
    field :<%= f.name %>, <%= f.type %>::Type, ''<% if f.renamed? %>, property: :<%= f.property %><% end %>
<% end -%>

    # has_many

<% @type.has_many_fields.each do |f| -%>
    field :<%= f.name %>, types[<%= f.type %>::Type], ''<% if f.renamed? %>, property: :<%= f.property %><% end %>
<% end -%>

    # invalid

<% @type.invalid_associations.each do |a| -%>
    # <%= a.association.macro %> <%= a.association.name %>
<% end -%>

  end

  Create = GraphQL::Relay::Mutation.define do

    name 'Create<%= @type.base_name %>'

<% @type.create_input_fields.each do |f| -%>
    <% if f.foreign_key? && !f.required? %># <% end %>input_field :<%= f.property %>, <% if f.required? %>!<% end %>types.<%= f.type %>
<% end -%>

    return_field :<%= @type.field_name %>, <%= @type.type_name %>::Type

    resolve -> (inputs, ctx) {
      params = inputs.to_h
      params[:created_by] = ctx[:current_user]
      result = <%= @type.model.name %>.create(params)

      { <%= @type.field_name %>: result }
    }

  end

  Update = GraphQL::Relay::Mutation.define do

    name 'Update<%= @type.base_name %>'

<% @type.update_input_fields.each do |f| -%>
    input_field :<%= f.property %>, <% if f.required? %>!<% end %>types.<%= f.type %>
<% end -%>

    return_field :<%= @type.field_name %>, <%= @type.type_name %>::Type

    resolve -> (inputs, ctx) {
      params = inputs.to_h
      id = params.delete('id')
      result = <%= @type.model %>.update(id, params)

      { <%= @type.field_name %>: result }
    }

  end

  Delete = GraphQL::Relay::Mutation.define do

    name 'Delete<%= @type.base_name %>'

    input_field :id, !types.Int

    resolve -> (inputs, ctx) {
      <%= @type.model %>.destroy(inputs['id'])

      nil
    }

  end

end
