module <%= @type.type_name %>

  Type = GraphQL::ObjectType.define do

    name '<%= @type.base_name %>'
    description ''

    # relay node interface

    interfaces [NodeIdentification.interface]
    global_id_field :id

    # scalars

  <% @type.scalar_fields.each do |f| -%>
    field :<%= f.name %>, <% if f.required? %>!<% end %>types.<%= f.type %>, ""<% if f.renamed? %>, property: :<%= f.property %><% end %>
  <% end -%>

    # belongs_to

  <% @type.belongs_to_fields.each do |f| -%>
    field :<%= f.name %>, <%= f.type %>, ""<% if f.renamed? %>, property: :<%= f.property %><% end %>
  <% end -%>

    # has_one

  <% @type.has_one_fields.each do |f| -%>
    field :<%= f.name %>, <%= f.type %>, ""<% if f.renamed? %>, property: :<%= f.property %><% end %>
  <% end -%>

    # has_many

  <% @type.has_many_fields.each do |f| -%>
    field :<%= f.name %>, types[<%= f.type %>], ""<% if f.renamed? %>, property: :<%= f.property %><% end %>
  <% end -%>

    # invalid

  <% @type.invalid_associations.each do |a| -%>
    # <%= a.association.macro %> <%= a.association.name %>
  <% end -%>

  end

  Create = GraphQL::Relay::Mutation.define do

    name "Create<%= @type.base_name %>"

    return_field <%= @type.field_name %>, <%= @type.type_name %>::Type

    resolve -> (inputs, ctx) {
      { <%= @type.field_name %>: <%= @type.field_name %> }
    }

  end

  Update = GraphQL::Relay::Mutation.define do

    name "Update<%= @type.base_name %>"

    input_field :id, !types.Int

    return_field <%= @type.field_name %>, <%= @type.type_name %>::Type

    resolve -> (inputs, ctx) {
      record = <%= @type.model %>.update(inputs['id'], inputs.to_h.except(:id))
      { <%= @type.field_name %>: record }
    }

  end

  Delete = GraphQL::Relay::Mutation.define do

    name "Delete<%= @type.base_name %>"

    input_field :id, !types.Int

    resolve -> (inputs, ctx) {
      <%= @type.model %>.destroy(inputs['id'])
    }

  end

end
